pipeline {
    agent any

    environment {
        DOCKER_CREDENTIALS_ID = 'dockerhub-credentials-id'
        DOCKER_IMAGE = 'seansal/shodan-k8s-backend'
        IMAGE_TAG = "${env.BUILD_ID}"
    }

    stages {
        stage('Checkout') {
            steps {
                dir('backend') {
                    checkout scm
                }
            }
        }


    stages {
        stage('Checkout Backend') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/main']],
                    extensions: [[
                        $class: 'SparseCheckoutPaths',
                        sparseCheckoutPaths: [[path: 'backend/']]
                    ]],
                    userRemoteConfigs: [[url: 'https://github.com/batzsalmassi/shodapp-k8s.git']]
                ])
            }
        }

        stage('Run Tests') {
            steps {
                dir('backend') {
                    sh '''
                        python -m pytest tests/ -v
                        python3 shodan_app.py &
                        sleep 5
                        curl -f http://localhost:5055/api/health
                        pkill -f shodan_app.py
                    '''
                }
            }
        }

        stage('Build and Tag Docker Image') {
            steps {
                dir('backend') {
                    withCredentials([usernamePassword(credentialsId: env.DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh '''
                            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
                            docker pull $DOCKER_IMAGE:latest
                            docker tag $DOCKER_IMAGE:latest $DOCKER_IMAGE:$IMAGE_TAG
                            docker push $DOCKER_IMAGE:$IMAGE_TAG
                            docker buildx create --use
                            docker buildx build --platform linux/amd64,linux/arm64 -t $DOCKER_IMAGE:latest --push .
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
            sh 'docker logout'
        }
        success {
            echo 'Pipeline completed successfully'
        }
        failure {
            echo 'Pipeline failed'
        }
    }
}